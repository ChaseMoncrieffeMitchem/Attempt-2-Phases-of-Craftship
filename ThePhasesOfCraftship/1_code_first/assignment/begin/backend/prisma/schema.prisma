generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model Users_Table {
  id        BigInt  @id @default(autoincrement())
  email     String? @unique
  username  String? @unique
  firstName String?
  lastName  String?
  password  String?

  member Member?

  @@map("Users Table")
}

model Member {
  id    BigInt   @id @default(autoincrement())
  
  user Users_Table @relation(fields: [userId], references: [id])
  userId BigInt     @unique // relation scalar field (used in the `@relation` attribute above)
  posts Post[]
  votes Vote[]
  comments Comment[]
}

model Post {
  id             Int       @id @default(autoincrement())
  memberPostedBy Member    @relation(fields: [memberId], references: [id])
  memberId       BigInt    // Foreign key to the Member table
  postType       String    // 'Text' or 'Link'
  title          String
  content        String
  comments       Comment[]
  dateCreated    DateTime  @default(now())
  votes          Vote[]
}

model Comment {
  id     Int  @id @default(autoincrement())

  // Foreign key relation to the Post table
  postId Int // Foreign key to the Post table
  post   Post @relation(fields: [postId], references: [id])
  text   String

  memberId        BigInt // Foreign key to the Member table
  memberPostedBy Member @relation(fields: [memberId], references: [id]) 

  parentCommentId Int?
  parentComment   Comment? @relation("Replies", fields: [parentCommentId], references: [id])
  replyComments   Comment[] @relation("Replies")
}

model Vote {
  id            Int  @id @default(autoincrement())

  postId        Int // Foreign key to the Post table
  postBelongsTo Post @relation(fields: [postId], references: [id])

  memberId      BigInt // Foreign key to the Member table
  memberPostedBy Member @relation(fields: [memberId], references: [id])

  voteType      String  // 'Upvote' or 'Downvote'
}
